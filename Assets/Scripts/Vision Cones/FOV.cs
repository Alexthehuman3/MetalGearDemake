using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class FOV : MonoBehaviour
{
    // Angles
    public float viewRadius = 0;
    [Range(0, 360)]
    public float viewAngle = 0;

    // Layer Mask
    public LayerMask obstacleMask;

    // Mesh
    public float meshResolution = 0;
    public MeshFilter viewMeshFilter;
    Mesh viewMesh;

    // Edges
    public int edgeResolveIter = 0;
    public float edgeDistanceThreshold = 0;

    public struct ViewCastInfo
    {
        public ViewCastInfo(bool _hit, Vector3 _point, float _distance, float _angle)
        {
            hit = _hit;
            point = _point;
            distance = _distance;
            angle = _angle;
        }

        public bool hit;
        public Vector3 point;
        public float distance;
        public float angle;
    }

    public struct EdgeInfo
    {
        public EdgeInfo(Vector3 _PointA, Vector3 _PointB)
        {
            pointA = _PointA;
            pointB = _PointB;
        }

        public Vector3 pointA;
        public Vector3 pointB;
    }

    private void Start()
    {
        viewMesh = new Mesh();
        viewMesh.name = "View Mesh";

        viewMeshFilter.mesh = viewMesh;

    }

    public void LateUpdate()
    {
        DrawVisionCone();
    }

    // Calculates the direction from any angle given
    public Vector3 DirectionFromAngle(float angleInDegrees, bool angleIsGlobal)
    {
        if (!angleIsGlobal)
        {
            angleInDegrees += -transform.eulerAngles.z;
        }

        return new Vector3(Mathf.Sin(angleInDegrees * Mathf.Deg2Rad), Mathf.Cos(angleInDegrees * Mathf.Deg2Rad), 0);
    }

    ViewCastInfo ViewCast(float globalAngle)
    {
        Vector3 dir = DirectionFromAngle(globalAngle, true);
        RaycastHit hit;

        if (Physics.Raycast(transform.position, dir, out hit, viewRadius, obstacleMask))
        {
            return new ViewCastInfo(true, hit.point, hit.distance, globalAngle);
        }
        else
        {
            return new ViewCastInfo(false, transform.position + dir * viewRadius, viewRadius, globalAngle);
        }

    }

    EdgeInfo FindEdge(ViewCastInfo minViewCast, ViewCastInfo maxViewCast)
    {
        float minAngle = minViewCast.angle;
        float maxAngle = maxViewCast.angle;
        Vector3 minPoint = Vector3.zero;
        Vector3 maxPoint = Vector3.zero;

        for(int i = 0; i < edgeResolveIter; i++)
        {
            float angle = (minAngle + maxAngle) / 2;
            ViewCastInfo viewCast = ViewCast(angle);

            bool edgeDistThresExceed = Mathf.Abs(minViewCast.distance - viewCast.distance) > edgeDistanceThreshold;

            if (viewCast.hit == minViewCast.hit && !edgeDistThresExceed)
            {
                minAngle = angle;
                minPoint = viewCast.point;
            }
            else
            {
                maxAngle = angle;
                maxPoint = viewCast.point;
            }
        }
        return new EdgeInfo(minPoint, maxPoint);
    }

    // Creates an array of vertices from the points that were generated by the raycast hit
    // These vertices are then calculated into triangles 
    // and both vertices and triangles are drawn by the mesh.
    void DrawVisionCone()
    {
        List<Vector3> viewPoints = new List<Vector3>();

        int step_count = Mathf.RoundToInt(viewAngle * meshResolution);
        float stepAngleSize = viewAngle / step_count;

        ViewCastInfo oldViewCast = new ViewCastInfo();

        for(int i = 0; i <= step_count; i++)
        {
            float angle = -transform.eulerAngles.z - viewAngle / 2 + stepAngleSize * i;
            ViewCastInfo viewCast = ViewCast(angle);

            if (i > 0)
            {
                bool edgeDistThresExceed = Mathf.Abs(oldViewCast.distance - viewCast.distance) > edgeDistanceThreshold;

                if (oldViewCast.hit != viewCast.hit || (oldViewCast.hit && viewCast.hit && edgeDistThresExceed))
                {
                    EdgeInfo edge = FindEdge(oldViewCast, viewCast);

                    if (edge.pointA != Vector3.zero)
                    {
                        viewPoints.Add(edge.pointA);
                    }

                    if (edge.pointB != Vector3.zero)
                    {
                        viewPoints.Add(edge.pointB);
                    }

                }
            }

            viewPoints.Add(viewCast.point);
            oldViewCast = viewCast;
        }

        // Mesh Stuff
        int vertexCount = viewPoints.Count + 1;
        Vector3[] vertices = new Vector3[vertexCount];
        int[] triangles = new int[(vertexCount - 2) * 3];

        vertices[0] = Vector3.zero; // Vertex 0 is relative to parent obj
        for(int i = 0; i < vertexCount - 1; i++)
        {
            vertices[i + 1] = transform.InverseTransformPoint(viewPoints[i]);

            if (i < vertexCount - 2)
            {
                triangles[i * 3] = 0;
                triangles[i * 3 + 1] = i + 1;
                triangles[i * 3 + 2] = i + 2;
            }
        }
        viewMesh.Clear();
        viewMesh.vertices = vertices;
        viewMesh.triangles = triangles;
        viewMesh.RecalculateNormals();
    }
}
